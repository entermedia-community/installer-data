import org.openedit.entermedia.modules.*;
import org.openedit.entermedia.edit.*;
import com.openedit.page.*;
import com.openedit.*;
import org.openedit.entermedia.*;
import org.openedit.data.Searcher;
import com.openedit.hittracker.*;
import org.openedit.entermedia.creator.*;
import org.openedit.repository.filesystem.*;
import org.openedit.repository.*;
import org.openedit.*;
import com.openedit.util.*;
import java.util.*;
import java.io.OutputStream;
import org.dom4j.*;

public void migratePage(Page source, Page destination)
{
	if(source != null && destination != null)
	{
		log.info("moving " + source + " to " + destination + " for " + applicationid);
		try
		{
			pageManager.movePage(source, destination);
		}
		catch(RepositoryException e)
		{
			log.info(e.getMessage());
		}
	}
}

public void updateMounts()
{
	XmlUtil xmlutil = new XmlUtil();
	Page mounts = pageManager.getPage("/WEB-INF/oemounts.xml", true);
	if( mounts.exists() )
	{
		Element root = xmlutil.getXml(mounts.getInputStream(), "UTF-8");
		List children = root.elements("mount");
		for (Iterator iterator = children.iterator(); iterator.hasNext();)
		{
			Element child = (Element) iterator.next();
			String path  = child.attributeValue("path");
			String origPath = path;
			if(path.contains("originals"))
			{
				//change browse to catalogs
				if( !path.startsWith("/WEB-INF/" ) )
				{
					path = path.replace("browse", "catalogs");
					//remove "data/"
					
					path = path.replace("data/", "");
					path = "/WEB-INF/data" + path;
					path = path.replace("data/", "");
					
					//now save it back to xml
					child.addAttribute("path", path);
					OutputStream out = pageManager.saveToStream(mounts);
					xmlutil.saveXml(root, out, "UTF-8");
					
					log.info("Changed " + origPath + " to " + path);
				}
			}
		}
	}
	else
	{
		log.info("/WEB-INF/oemounts.xml doesn't exist");
	}
}

public void moveApplicationConfiguration()
{
	configuration = pageManager.getPage("/" + applicationid + "/configuration");
	data = pageManager.getPage("/" + applicationid + "/data");
	migratePage(configuration, data);
}

public void renameBrowseToCatalogs()
{
	browse = pageManager.getPage("/" + applicationid + "/browse");
	catalogs = pageManager.getPage("/" + applicationid + "/catalogs");
	migratePage(browse, catalogs);
}


public void moveAlbums(String inPath)
{
	children = pageManager.getChildrenPaths(inPath);
	for (Iterator iterator = children.iterator(); iterator.hasNext();) 
	{
	 	path =  iterator.next();
	 	if( path.contains("/.versions") )
		{
			continue;
		}
		
		page = pageManager.getPage(path);
	 	if(path.endsWith("albums") && page.isFolder())
	 	{
	 		String newpath = "/WEB-INF/data" + path;
	 		newpage = pageManager.getPage(newpath);
	 		migratePage(page, newpage);
	 	}
	 	else
	 	{
	 		if( page.isFolder() )
			{
				moveAlbums(path);
			}
	 	}
	}
}

public void renameProperties(String inPath)
{
	children = pageManager.getChildrenPaths(inPath);
	for (Iterator iterator = children.iterator(); iterator.hasNext();) 
	{
	 	path =  iterator.next();
	 	if( path.contains("/.versions") )
		{
			continue;
		}
		
		page = pageManager.getPage(path);
	 	if(path.endsWith("properties.xml"))
	 	{
	 		String newpath = path.replace("properties.xml", ".xml");
	 		newpage = pageManager.getPage(newpath);
	 		migratePage(page, newpage);
	 	}
	 	else
	 	{
	 		if( page.isFolder() )
			{
				renameProperties(path);
			}
	 	}
	}
}

public void moveAlbumCounter()
{
	counter = pageManager.getPage("/" + applicationid + "/data/albumcount.properties");
	destcounter = pageManager.getPage("/WEB-INF/data/" + applicationid + "/albums/idcounter.properties");
	migratePage(counter, destcounter);
}

//move to application level script
moveApplicationConfiguration();
renameBrowseToCatalogs();
updateMounts();
renameProperties("/" + applicationid + "/data");

//album/user related stuff
moveAlbums("/users");
moveAlbumCounter();

